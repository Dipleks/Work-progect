package lessons.Lessons_1.l5_Интерфейсы;
/* Интерфейсы являются основной частью языка программирования Java.
 * Кроме JDK они используются еще и в шаблонах проектирования, а также
 * множестве различных инструментах и фреймворках. Также интерфейсы
 * обеспечивают абстракцию в Java.
 * Например, нам нужно создать рисунок, который состоит из нескольких
 * фигур. Для этого мы можем создать интерфейс Shape и определить методы
 * для работы с объектами Shape. Для простоты, давайте определим
 * только два метода — draw() - чтобы нарисовать фигуру и метод getArea(),
 * который будет возвращать площадь фигуры.

Пример Java интерфейса
На основании вышеуказанных требований, наш интерфейс
Shape будет выглядеть следующим образом:
*/
public interface Shape {
    //Значения являются неявно public, static и final:
    String LABLE = "Shape";

    //методы интерфейса являются неявно abstract и public:
    void draw();
    double getArea();
}
/*Основная информация об интерфейсах в Java:
    1) interface — ключевое слово для создания интерфейса в Java.
    2) Создать экземпляр интерфейса в Java нельзя.
    3) Интерфейс обеспечивает абсолютную абстракцию. Абстрактные классы могут иметь
        реализаций метода, а интерфейс не может.
    4) Интерфейсы не могут иметь конструкторов, потому что мы не можем создать
        экземпляр интерфейса. Также интерфейсы не могут иметь методы с реализацией.
    5) По умолчанию любой атрибут интерфейса является public, static и final,
        так что нам не нужно определять модификаторы доступа к атрибутам. Если
        же вы попробуете это сделать, то компилятор жаловаться не будет.
    6) По умолчанию методы интерфейса неявно abstract и public. Это очень умное
        решение, потому что в интерфейсе метод не имеет реализации — этим занимаются
        подклассы, реализующие этот интерфейс.
    7) Интерфейс в Java не может быть подклассом у другого класса, но он может
        реализовать другой интерфейс. public interface Shape extends Cloneable{} -
        пример интерфейса, который наследует другой интерфейс. На самом деле Java
        обеспечивает множественное наследование интерфейсов — это означает, что
        интерфейс может наследовать несколько интерфейсов.
    8) Ключевое слово implements используется классами для реализации интерфейса.
    9) Класс, реализующий интерфейс, должен обеспечить реализацию всех его методов,
        если только это не абстрактный класс. Например, мы можем реализовать наш
        интерфейс в абстрактном классе.
   10) Программисты должны писать программы в терминах интерфейсов, а не реализаций,
        потому что в будущем переписать реализацию интерфейса можно будет и в новом классе.
*
* Реализуем тепрь наш интерфейс в классе Circle.*/