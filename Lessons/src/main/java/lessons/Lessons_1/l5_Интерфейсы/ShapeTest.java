package lessons.Lessons_1.l5_Интерфейсы;

public class ShapeTest {
    public static void main(String[] args) {
        // реализуем интерфейс
        Shape shape = new Circle(10);

        shape.draw();
        System.out.println("Площадь = " + shape.getArea());

        //легко переключаемся с одной реализации на другую
        shape = new Rectangle(10,10);
        shape.draw();
        System.out.println("Площадь = " + +shape.getArea());
    }
    /*
    * Получим ответ:
    *   Рисуем Круг
    *   Площадь = 314.1592653589793
    *   Рисуем прямоугольник
    *   Площадь = 100.0
    * */
}
/*Преимущества интерфейсов в Java:
    1) Интерфейс обеспечивает так называемый контракт для всех классов, которые реализуют интерфейс.
    2) Интерфейсы хороши для создания начальной точки и создания иерархии в проекте.
*/
/*Недостатки интерфейсов в Java.
Хотя интерфейсы дают программисту множество преимуществ, они также имеют и недостатки.
    1) Мы должны очень тщательно выбирать методы интерфейса во время проектирования
        любого проекта, потому что мы не можем добавить или удалять методы из интерфейса
        на более поздних этапах реализации проекта. Если же вы захотите удалить какие-то
        методы с интерфейса, то это приведет к ошибке компиляции во всех классах, которые
        реализуют интерфейс. Чтобы избежать этого, обычно создают множество интерфейсов,
        расширяющих базовый интерфейс, что усложняет поддержку такого кода.
    2) Если классы, которые реализуют интерфейс, имеют свои собственные методы, мы не можем
        использовать их непосредственно в коде, потому что тип объекта определяет интерфейс,
        у которого нет таких методов. Например, в таком коде мы получим ошибку компиляции
        кода для shape.getRadius(). Чтобы избежать ошибки, мы можем использовать приведение
        типов:
                    Circle c = (Circle) shape;
                    c.getRadius();

    Хотя приведение типов также имеет свои недостатки.
  Интересно знать, что в Java 8 в интерфейсах появилась возможность определения методов по умолчанию,
  а также реализация статических методов в интерфейсах.*/
