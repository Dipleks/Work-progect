package Ноябрь_20;/*Preferences*/

import java.io.FileOutputStream;
import java.util.prefs.Preferences;

/*Существует немало случаев, когда программисту необходимо
сохранять какие-нибудь конфигурационные параметры. Раньше
это можно было сделать используя класс java.util.Properties.
Поначалу это выглядело не так уж плохо, но тем не менее на
программиста ложилась задача где разместить конфигурационный
файл.
PreferencesAPI появился в Java 1.4 и по словам Sun призван
обеспечить более удобный способ хранения и восстановления
каких-либо настроек (для пользователя или системы). И теперь
такого понятия как конфигурационный файл по сути нет.
Насколько это хорошо, что нет конфигурационного файла – вопрос
открыт. Но система позволяет вам не просто хранить данные,
но и делать экспорт/импорт – вы получаете приятный XML,
который можно переносить вместе с приложением.
И что еще более важно – теперь система позволяет делать не
«плоский» конфигурационный файл, а иерархическую структуру.
Давайте немного рассмотрим как устроено сохрание данных изнутри.
Данные настроек пользователя организуются в виде иерархической
коллекции узлов – по сути это дерево. Существует два типа
деревьев – для пользователя и для системы. Надо также отметить,
что для каждого пользователя организуется своя иерархия данных
пользователя. Для системы она одна для всех пользователей.
Техника работы с обоими типами деревьев одинакова*/
public class Preferences_u {
    public static void main(String[] args) throws Exception{
        Preferences root = Preferences.systemRoot();
        Preferences user = Preferences.userRoot();
        user.put("Key", "value");
        System.out.println(user.get("Key", "default value"));
        Preferences node = user.node("myPackage");
        node.put("One", "1");
        System.out.println(node.getInt("One", 2));
        Preferences myPackage = Preferences.systemNodeForPackage(PropertiesClass.class);
        user.exportSubtree(new FileOutputStream("myProperty.xml")); //сохраняем все в xml фаил.
    }
}
