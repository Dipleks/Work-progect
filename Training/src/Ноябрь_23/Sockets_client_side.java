package Ноябрь_23;/*Sockets client side - Сокеты на стороне клиента*/
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Scanner;
/*Напишем простенькую программу которая будет получать запрос от другова компьютера.
*
* Все компьютеры общаются между собой за счет IP адреса.
* IP адрес (ipv4) состоит из 4 цифр разделенных точками,
* есть ipv6 это адрес состоящий из 6 цифр разделеных
* точками, он был оздан когда начо нехватать стандартных IP.
*
* Когда мы обращаемся через браузер, скайп и т.д мы посылаем
* запрос на IP адрес, т.е под google.com скрывается ip, а название
* это лишь доменное имя. Так же вместе с ip мы отправляем запрос и
* на порт. Под каждый порт зарезервирована своя программа, напрмер 80
* порт отдан под HTTP (например, google.com:80). Как компьютеры находят
* друг друга? Очень просто, отправляя запрос, напрмер, на гугл, браузер
* ищет ip гугла сначало в кэше, если он его не находит то обращается на
* DHCP сервер, у которого прописаны все адреса. Далее он направляется через
* маршрутизаторы (как бы по стрелкам), котороые направляют наш запрос/ответ,
* пока он не достигнет нужного компьютера!*/
public class Sockets_client_side {
    public static void main(String[] args) throws Exception {
        //Сокеты необходимо закрывать, поэтому поместим его трей:
        try (Socket socket = new Socket()){
            //конектимся:
            //socket.connect(new InetSocketAddress("india.colorado.edu", 13));
            //создадим код для нашего сервера, который создадим в следующем уроке:
            socket.connect(new InetSocketAddress(InetAddress.getLocalHost(), 8189));
            //вместо InetAddress.getLocalHost() можно просто написать "localhost"

            /*добавляем: india.colorado.edu - адрес, 13 - порт, можем добавить
            * третим параметром таймаут, например, 2000, на случай если программа
            * зависнит, то по истечении таймаута она отключится.*/
            Scanner scanner = new Scanner(socket.getInputStream());
            while (scanner.hasNextLine()){
                System.out.println(scanner.nextLine());
            } } }}
