package Best_practice.BestPractice_1_15;/*Singleton*/

public class BestPractice_3 {
   /* Singleton это класс который мы можем создать только один раз и который
    * имеет приватный конструктор:
    * */
    private static final BestPractice_3 singleton = new BestPractice_3();
    private BestPractice_3() { }
   /*
    * На сегодняшний день данный патерн использует редко, одна из причин, его
    * плохо тестировать, они не являются явными.
    * Singleton является антипатерном на сегодняшний день!
    *
    * Если нам нужно создать синглтон, то есть два подхода объявить
    * public static final BestPractice_3 singleton или
    * сделать публичный метод:
    */
   public static BestPractice_3 getInstance(){
       return singleton;
   }
    /*
     * в первом случаем мы будем знать что это Instance нашего синглтона, а
     * во-втором случае мы не уверены что это Instance (постоянный) значение!
     * Но преимуществом 2-го подхода является то, что его можно поменять.
     *
     * Из недостатков Singleton будет если он имплиментит Serializable, что
     * позволит получить второй Instance.
     * Так же если мы вызовем рефлексию, то нам ничто не помешает вызвать приватные конструкторы.
     * Для избежания подобных "хаков" сейчас используется более продвинутый способ
     * у кторого не будет выше перечисленных проблем, плюс в него мы можем при желании
     * добавить каие-нибудь методы:
     */
    enum MySingleton{
        INSTANCE;
    }

    public static void main(String[] args) {
    }
}
