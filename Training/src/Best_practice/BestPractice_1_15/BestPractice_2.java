package Best_practice.BestPractice_1_15;/*Static factory методы,
расмотрим преимущества над обычными конструкторами!*/

public class BestPractice_2 {
    public static void main(String[] args) {
/*Теперь нам проще найти нужный парамет, просто вызвав его, без всякой
* путаницы с именами:*/
        Car.getCar();
    }
}
class Car {
    //конструктор:
    private Car(){}
    //но они не всегда удобны, и тогда лучше применять Static factory методы:
    public static Car getCar(){
        return new Car();
    }
   /* ИМЯ. Допустим у нас 10 конструкторов или еще больше, то в таком случае
    * намного удобнее использовать Static factory методы. Преимущество данного
    * метода в именах (они могут быть разные getCar, getAudi и т.д),
    * конструкторы имеют имя равное имени класса, т.е у нас будут 10
    * конструкторов с одинаковым именем.
    * КЭШ. Каждый раз вызывая конструктор создается место в памяти для нового экземпляра,
    * Static factory метод использует свой кэш.
    * НАСЛЕДОВАНИЕ. В Static factory методох мы можем возращать нетолько сам класс, но и другие
    * имплеминтации классов.
    *
    * Из недостатков:
    * Мы неможем унаследовать класс, если у нас нет паблк конструкторов:
    *                               Car(){}
    */
}
