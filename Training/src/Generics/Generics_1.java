package Generics;/*Что такое дженерики
Обобщения - это параметризованные типы. С их помощью можно
объявлять классы, интерфейсы и методы, где тип данных
указан в виде параметра. Обобщения добавили в язык безопасность типов.*/

import java.util.ArrayList;
import java.util.List;

public class Generics_1 {
    public static void main(String[] args) {
 /*Допустим у нас есть список студентов и мы добовляем их вораст,
 до появления дженириков мы могли в наш лист по мимо интового значения добавить
 любой другой параметр, например, стрингу, и если мы захотим пробежать
 по нашему списку, получим эсепшен! Джинерики помогают избежать этого
 они указывают какой именно параметр мы можем добавить!*/
//        List ages = new ArrayList();
//        List<Integer> ages = new ArrayList<>();
//        ages.add(20);
//        ages.add("str");
//        for (int i = 0; i < ages.size(); i++) {
//            int j = (Integer) ages.get(i);
//            System.out.println(j); }

        //можем применить наш джененрик:
        Cell<String> cell = new Cell<>();
        cell.setT("hello");
        String s = cell.getT();
 /*Из него мы можем создать так же и не безопасный не дженерик:*/
        Cell cell1 = new Cell();
    }
}
//Джинерики в идеале используются для хранения информации (у них скудный функционал):
class Cell <T> {
    T t;
//можем создать ему гетеры и сеторы:
    public T getT() { return t; }
    public void setT(T t) { this.t = t; }}

/*После компиляции <T> автоматически меняется на Object, т.е в байкоде
* его <T> уже не будет! Это сделано для совместимости с предыдущими версиями
* кода!*/