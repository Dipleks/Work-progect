package Solid;
/*SOLID (сокр. от англ. single responsibility, open-closed,
Liskov substitution, interface segregation и dependency inversion)
в программировании — мнемонический акроним, введённый Майклом Фэзерсом
(Michael Feathers) для первых пяти принципов, названных
Робертом Мартином в начале 2000-х, которые означали
пять основных принципов объектно-ориентированного программирования
и проектирования.

Эти принципы, когда применяются вместе, предназначены для повышения
 вероятности того, что программист создаст систему, которую будет
 легко поддерживать и расширять в течение долгого времени.
 Принципы SOLID — это руководства, которые могут применяться во
 время работы над программным обеспечением для удаления «кода с запашком»
 предписывая программисту выполнять рефакторинг исходного кода, пока
 тот не станет разборчиво написанным и расширяемым. Это часть общей
 стратегии гибкой и адаптивной разработки

 Признаки плохого проекта:
    - Закрепощённость: система с трудом поддается изменениям,
поскольку любое минимальное изменение вызывает эффект
"снежного кома", затрагивающего другие компоненты системы.
    - Неустойчивость: в результате осуществляемых изменений
система разрушается в тех местах, которые не имеют прямого
отношения к непосредственно изменяемому компоненту.
    - Неподвижность: достаточно трудно разделить систему на
компоненты, которые могли бы повторно использоваться в других системах.
    - Вязкость: сделать что-то правильно намного сложнее,
чем выполнить какие-либо некорректные действия.
    - Неоправданная сложность: проект включает инфраструктуру,
применение которой не влечёт непосредственной выгоды.
    - Неопределенность: проект трудно читать и понимать.
Недостаточно четко выражено содержимое проекта.

Принципы:
1. Принцип единственной ответственности.
2. Принцип открытости/закрытости.
3. Принцип подстановки Барбары Лисков.
4. Принцип разделения интерфейса.
5. Принцип инверсии зависимостей.*/
public class Solid_1 {
}
