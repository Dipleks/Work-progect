package Ноябрь_21;/*Статическая инициализация*/

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class Статическая_инициализация {
    //Мы можем инициализировать переменные в статических блоках:
//    static int i;
//    static {
//        i = 5;
//    }
    /*Статические блоки во-первых позволяют сократить код,
    * например еслиб i принимало у нас метод:*/
//    static int getI() {
//        return 5;
//    }
//    static int i = getI();
    /*Гораздо короче код получится 1м способом.
    * Но что делать если метод выкидывает Исключение?*/
//    static int getI() throws FileNotFoundException {
//        InputStream inputStream = new FileInputStream("");
//        return 5;
//    }
    //static int i = getI();
    /*В этом случаем метод getI() не получится принять!
    * Для этого нам понадобиться наш блок инициализации:*/
//    static int i;
//    static {
//        try {
//            i = getI();
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        }
//    } //Теперь мы можем принять наш метод!

    //Бывают такие ситуации, когда мы принимаем уже проинициалзированный
    //объек, масив..., тогда статический блок инициализации нам понадобиться
    //для присвоения значений:
//    static int[] i = new int[3];
//    static {
//        i[0] = 0;
//        i[1] = 1;
//        i[2] = 2;
//    }

    /*Если у нас имеется несколько блоков инициализации и
    * присвоенная переменная, и мы хотим вывести значение переменной,
    * то у нас произойдет автоматическое объединение всех значений в один
    * блок и выведенно значение согласно условию:*/
    static {
        i = 10;
    }
    static int i = 0;
    static {
        ++i;
    }
    /*Результатом System.out.println(i) будет "1", т.к.
    * блок примет вид:
    * static {
    *   i = 10;
    *   i = 0;
    *   ++i
    * }
    * Сначало принициализируется 10, затем 0, а после к 0 прибавится 1!*/
    public static void main(String[] args) {
        System.out.println(i);
    }
    /*Классы и интерфейсы вложенные могут быть статическими,
    * при этом интерфейсы по умолачнию статические:*/
    static class Car{}
    interface Rut{}

    /*Вложенные классы и интерфейсы имеют доступ только к статическим переменным,
    * если класс будет не статисеским, то он получает доступ ко всем переменным.*/

    /*Экземпляр интерфейса нельзя создать, его можно только наследовать, т.е
    * мы получим ошибку если сделаем так:
    * Car car = new Car();*/
}
/*Классы и интерфейсы верхнего уровня не могут быть статическими, т.е.
* нельзя написать:*/
//static class Car{}
//или
//static interface Rut{}
