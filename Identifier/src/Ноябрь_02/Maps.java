package Ноябрь_02;

import java.util.*;

public class Maps {
/*   Класс HashMap использует хеш-таблицу для хранения карточки,
* обеспечивая быстрое время выполнения запросов get() и put()
* при больших наборах. Ключи и значения могут быть
* любых типов, в том числе и null. При этом все ключи обязательно
* должны быть уникальны, а значения могут повторяться. Данная
* реализация не гарантирует порядка элементов.
* Т.е. HashMap реализует интерфейс Map, который подразумевает хранение
* данных в виде пар ключ-значение. HashMap не является
* синхронизированным и потокобезопасным. Также HashMap допускает
* хранение null ключей и значений, но недопускает дублей ключей.
* Следует помнить, что для null-ключа hashCode() всегда равен нулю.
*
*    Hashtable реализует интерфейс Map, которая хранит пары ключ-значения.
* Hashtable является синхронизированной и потокобезопасной коллекцией.
* Hashtable не допускается null-ключей и дублирующих ключей,
* а также null-значений.
* Сейчас для работы в многопоточной среде чаще стараются использовать
* более новую и удобную коллекцию ConcurrentHashMap.
*
*    LinkedHashMap - разрешает перебор в порядке вставки,
* LinkedHashMap хранит ключи в порядке вставки, но не обеспечивает
* скорость поиска HashMap. Реализует Map интерфейс, расширяет HashMap,
* допускает нулевые значения и нулевые ключи, не синхронизирован.
*
*    TreeMap хранит ключи отсортированными по возрастанию. Класс TreeMap
* расширяет класс AbstractMap и реализует интерфейс NavigatebleMap.
* Он создает коллекцию, которая для хранения элементов применяет дерево.
* Объекты сохраняются в отсортированном порядке по возрастанию. Время
* доступа и извлечения элементов достаточно мало, что делает класс
* TreeMap блестящим выбором для хранения больших объемов
* отсортированной информации, которая должна быть быстро найдена.
* TreeMap для хранения элементов применяет красно-черное дерево.
* Красно-черное дерево это частный случай двоичного дерева поиска.
* Двоичным деревом поиска (ДДП) называют дерево, все вершины которого
* упорядочены, каждая вершина имеет не более двух потомков (назовём
* их левым и правым), и все вершины, кроме корня, имеют родителя.
* Вершины, не имеющие потомков, называются листами. Подразумевается,
* что каждой вершине соответствует элемент или несколько элементов,
* имеющие некие ключевые значения, в дальнейшем именуемые просто
* ключами.*/
public static void main(String[] args) {
    Map map = new TreeMap();
    map.put("1", "ONE");
    map.put("3", "THREE");
    map.put("2","TWO");
    Set set = map.entrySet();
    for (Object o:set){
        System.out.println(o); //Ответ: 1=ONE, 2=TWO, 3=THREE
    }
}
}
