package Ноябрь_02;

import java.util.*;

public class Лист {
    /*Класс ArrayList представляет обобщенную коллекцию,
    * которая наследует свою функциональность от класса
    * AbstractList и применяет интерфейс List. Проще говоря,
    * ArrayList представляет простой список, аналогичный
    * массиву, за тем исключением, что количество
    * элементов в нем не фиксировано.
    * ArrayList - автоматически расширяемый массив.*/
    public static void main(String[] args) {
        List list = new ArrayList();
        System.out.println(list.size()); //Ответ: 0, т.к размер не задан.
/*Емкость в ArrayList представляет размер массива,
* который будет использоваться для хранения объектов.
* При добавлении элементов фактически происходит
* перераспределение памяти - создание нового массива
* и копирование в него элементов из старого массива.
* Изначальное задание емкости ArrayList позволяет
* снизить подобные перераспределения памяти, тем
* самым повышая производительность.*/
        list.add(1);
        list.add(2);
        list.add(3);
        for (int i = 0; i<list.size(); i++){
            System.out.println(list.get(i)); //Ответ: 1,2,3
        }
    }
/*Vector класс реализует динамический массив.
* Это тот же ArrayList, но синхронизирован.*/
}
/*LinkedList имеет больше операций, чем ArrayList,
* а значит более сложный и требующий больше памяти.
* Класс представляет структуру данных связного списка
* и реализует интерфейсы List, Dequeue, Queue.
* Операции вставки и удаления в середине списка работают
* у него эффективнее. Но хуже обстоит дело с операциями
* произвольного доступа. В зависимости от вашей
* задачи и будет обусловлен выбор - ArrayList или LinkedList.
* Принцип работы сильно отличается. Тут уже не
* используется массив, а набор данных с двумя указателями
* на следующий и предыдущий объект. Вам не нужно думать о
* них, всё происходит под капотом.*/
