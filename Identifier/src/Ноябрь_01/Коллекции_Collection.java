package Ноябрь_01;

import java.util.*;

public class Коллекции_Collection {

        /*Для хранения наборов данных в Java предназначены массивы.
        * Однако их не всегда удобно использовать, прежде всего потому,
        * что они имеют фиксированную длину. Эту проблему в Java решают
        * коллекции. Однако суть не только в гибких по размеру наборах
        * объектов, но в и том, что классы коллекций реализуют различные
        * алгоритмы и структуры данных, например, такие как стек, очередь,
        * дерево и ряд других. Collection - это интерфейс.*/

        /*Во-первых, в основе всех коллекций лежит применение того или
        * иного интерфейса, который определяет базовый функционал.
        * Среди этих интерфейсов можно выделить следующие:
        * 1) Collection: базовый интерфейс для всех коллекций и других
        *    интерфейсов коллекций;
        * 2) Queue: наследует интерфейс Collection и представляет функционал
        *    для структур данных в виде очереди;
        * 3) Deque: наследует интерфейс Queue и представляет функционал
        *    для двунаправленных очередей;
        * 4) List: наследует интерфейс Collection и представляет
        *    функциональность простых списков;
        * 5) Set: также расширяет интерфейс Collection и используется
        *    для хранения множеств уникальных объектов;
        * 6) SortedSet: расширяет интерфейс Set для создания
        *    сортированных коллекций;
        * 7) NavigableSet: расширяет интерфейс SortedSet для создания
        *    коллекций, в которых можно осуществлять поиск по соответствию;
        * 8) Map: предназначен для созданий структур данных в виде словаря,
        *    где каждый элемент имеет определенный ключ и значение.
        *    В отличие от других интерфейсов коллекций не наследуется
        *    от интерфейса Collection.*/

        /*С помощью применения вышеописанных интерфейсов и абстрактных
        * классов в Java реализуется широкая палитра классов коллекций -
        * списки, множества, очереди, отображения и другие, среди
        * которых можно выделить следующие:
        * 1) ArrayList: простой список объектов;
        * 2) LinkedList: представляет связанный список;
        * 3) ArrayDeque: класс двунаправленной очереди, в которой мы можем
        *    произвести вставку и удаление как в начале коллекции, так и в ее конце;
        * 4) HashSet: набор объектов или хеш-множество, где каждый элемент
        *    имеет ключ - уникальный хеш-код. Объекты не упорядочены;
        * 5) TreeSet: набор отсортированных объектов в виде дерева. Объекты
        *    сортируются по значению, т.е если мы коллекцию задали 1,9,5,
        *    то при выводе мы получим 1,5,9;
        * 6) LinkedHashSet: связанное хеш-множество. Объекты упорядочены в
        *    таком порядке в которомы мы их добавили в коллекцию;
        * 7) PriorityQueue: очередь приоритетов;
        * 8) HashMap: структура данных в виде словаря, в котором
        *    каждый объект имеет уникальный ключ и некоторое значение;
        * 9) TreeMap.
        *
        * В коллекциях 3 основных класса: Collection, Collections и Arrays.
*/

    /*public static void main(String[] args) {
        Collection collection = new ArrayList(); //создаем простой список объектов.
        collection.add("1");  //добавляем объекты.
        collection.add("3");
        collection.add("2");
        collection.remove("2"); //удаляем не нужные объекты.
        //Iterator iterator = collection.iterator(); итератор (Iterator) это метод, позволяющий
        //         * возвращать нам объект, т.е. пробегаться по всему массиву (коллекции)!
        //while (iterator.hasNext()){System.out.println(iterator.next());}
        //hasNext - проверяет есть ли следующий объект, а next его возвращает.
        //Можно использовать цикл for, тогда Iterator можно не использовать:
        for (Object o : collection) {
            System.out.println(o); //Ответ: 1, 3! 2 нет т.к мы с ним сделали remove.
        }
    }*/
    /*Основными классами коллекций являются List, Set, Queue и
    * отдельный интерфейс Map!*/

    /*public static void main(String[] args) {
        List collection = new ArrayList();
//        collection.add("1");
//        collection.add("3");
//        collection.add("2");
        //В List идет работа по индексу:
        //System.out.println(collection.get(1)); //Ответ: 3! Т.к. в 1 ячейки у нас лежит 3!
        //Можно вывести все значения ячеек с помощью цикла:
//        for (int i = 0; i<collection.size(); i++){ //size - размер коллекции.
//            System.out.println(collection.get(i));} //get - получить значения коллекции.
            //Ответ: 1, 3, 2!
            //Так же можно изменять значения ячеек и добавлять:
          collection.add("1");
          collection.add("3");
          collection.add("2");
          collection.set(1, "5"); //переназначаем значение 1-й ячейки!
          collection.add(2,"7");
        for (int i = 0; i<collection.size(); i++){
              System.out.println(collection.get(i));} //Ответ: 1,5,7,2! В ячейку 1 переназначили 5,
                             //в ячейку 2 поместили 7, а 2 автоматом сместилась в следующею ячейку!
    }*/

    /*public static void main(String[] args) {
        Queue collection = new PriorityQueue(); //создаем очередь (queue)
        collection.add("1"); //можем записать и так collection.offer("1");
        collection.add("3");
        collection.add("2");
        //Для того чтобы пройтись по всей коллекции очереди нам понадобиться Iterator:
        Iterator iterator = collection.iterator();
        //Создадим цикл:
//        while (iterator.hasNext()){System.out.println(iterator.next()); }
//        System.out.println("Размер коллекции: "+collection.size()); }
        //Ответ: 1,2,3. Размер коллекции: 3
        //Так же мы можем удалять каждый опрошенный (poll) элемент:
        while (iterator.hasNext()){System.out.println(collection.poll()); }
        System.out.println("Кол-во оставшихся элементов: "+collection.size());
    } //Ответ: 1,2,3. Кол-во оставшихся элементов: 0*/

    /*public static void main(String[] args) {
        Set collection = new HashSet(); //создаем сет.
        collection.add("1"); //создаем ячейки (индексы) коллекции
        collection.add("3");
        collection.add("3");
        collection.add("3");
        collection.add("2");
        collection.add("2");
        collection.add("2");
        collection.add("2");
        for (Object o : collection){ //создаем цикл для извлечения объектов из индексов.
            System.out.println(o); //Ответ: 1,2,3
            *//*Set проверяет все индексы, выстривает значения по порядку, проверяет
            * есть ли повторяющиеся эллементы и выводит все элемнты без повторяющихся!
            * Т.е. Set делает элементы уникальными и они повторятся не могут!*//*
        }*/

    public static void main(String[] args) {
        /*Map добовляет значение по ключу.
        * Например, у нас есть библиотека у каждого читателя
        * ключ и нам нужно записать на читательский билет (ключ) книгу:*/
        Map collection = new HashMap();
        collection.put(1,"Сказки"); //вложим в наш ключь книгу.
        collection.put(2,"Фантастика");
        collection.put(3,"Детектив");
        collection.put(4,"Пушкин");
        //Допустим пришел человек и хочет сдать книгу,
        //нам необходимо посмотреть по ключу что у него была за книга:
        System.out.println(collection.get(2)); //Ответ: Фантастика.
        //Также мы можем просмотреть всю нашу колекцию:
        Set set = collection.entrySet();
        for (Object o : set){
            System.out.println(o); //Ответ: 1=Сказки
//                                          2=Фантастика
//                                          3=Детектив
//                                          4=Пушкин
        }
        //Но обычно нам не требуется просматривать всю коллекция,
        //а только нужно извлекать по ключу!
    }
}
