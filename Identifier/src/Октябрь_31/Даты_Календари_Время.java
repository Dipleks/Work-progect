package Октябрь_31;

import java.text.DateFormat;
import java.text.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class Даты_Календари_Время {
    public static void main(String[] args) throws ParseException {
        /*Date date = new Date(); //по умолчанию выведется сегодняшняя дата и время!
        System.out.println(date);
        Date date = new Date(1000); //отчет времени начинается с 1970г. в миллисекундах!
        System.out.println(date); //Ответ: Thu Jan 01 03:00:01 MSK 1970
        3 часа в данном случае добавилось из-за часового пояса!
        Напрямую с Date работать не очень удобно, например мне необходимо
        * вывести дату и время через неделю, тогда это все придется просчитать в миллисекундах!
        * Во избежании такой ситуации есть класс Calendar.
        * Напрямую new коледарь мы получить несможем, т.к. он является приватным классом,
        * но мы можем получить его инстас:
        Calendar calendar = Calendar.getInstance();
        Теперь в календарь мы можем засэтить нашу дату:
        calendar.setTime(date);
        System.out.println(calendar); //получим ответ: java.util.GregorianCalendar... и кучей всего, т.е мы
        //получили общею информацию, которую необходимо настроить! Например, вернем нашу
        //дату Thu Jan 01 03:00:01 MSK 1970:
        System.out.println(calendar.getTime());*/

        Calendar calendar = Calendar.getInstance();
        /*Наприер, я хочу прибавить к сегодняшней дате одну неделю:*/
        calendar.add(Calendar.WEEK_OF_MONTH, 1);
        System.out.println(calendar.getTime()); //Ответ: Tue Nov 07 10:13:15 MSK 2017

        /*Так же дату мы можем форматировать:*/
        DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.SHORT);
        System.out.println(dateFormat.format(calendar.getTime())); /*передаем нашу дату dateFormat, передаем
        * информацию о формате format, передаем нашу дату calendar.getTime(). Получим
        * ответ: 07.11.17*/

        /*Так же можно придумать свой формат, для этого используем SimpleDateFormat:*/
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd_MM_yyyy");
        System.out.println(simpleDateFormat.format(calendar.getTime())); //Ответ: 07_11_2017

        /*Так же существует обратное преобразование, например,
        * у нас есть дата 21.07.2015, и нам ее необходимо преобразовать,
        * делается это с помощью parse:*/

        Date newDate = simpleDateFormat.parse("21_05_2015"); /*"21_05_2015" равен "dd_MM_yyyy"*/
        /*при этом нам необходимо наш метод занести в исключение Exception (для всех) или ParseException*/
        System.out.println(newDate);
    }
}
/*  Формат-коды SimpleDateFormat
G 	Обозначение эры 	           н.э.
y 	Год из четырех цифр 	       2016
M 	Номер месяца года 	           11
d 	Число месяца 	               13
h 	Формат часа в A.M./P.M.(1~12)  7
H 	Формат часа(0~23)              19
m 	Минуты 	                       30
s 	Секунды 	                   45
S 	Миллисекунды 	               511
E 	День недели 	               Вс
D 	Номер дня в году 	           318
F 	Номер дня недели в месяце 	   2 (второе воскресение в этом месяце)
w 	Номер неделя в году 	       46
W 	Номер недели в месяце 	       2
a 	Маркер A.M./P.M. 	           AM
k 	Формат часа(1~24) 	           24
K 	Формат часа в A.M./P.M.(0~11)  0
z 	Часовой пояс 	               FET (Дальневосточноевропейское время)
' 	Выделение для текста 	       Текст
'' 	Одинарная кавычка 	           '
*/
/*     Символы преобразования даты и времени.
c 	Текущее время и дата 	                           Вс ноя 13 01:19:27 FET 2016
F 	Формат даты ISO 8601 (год-месяц-день) 	           2016-11-13
D 	Американский формат даты (месяц/день/год) 	       11/13/16
T 	24-часовой формат времени 	                       01:26:09
r 	12-часовой формат времени        	               01:26:51 AM
R 	24-часовой формат времени без секунд 	           01:27
Y 	Текущий год из четырех цифр (с ведущими нулями)    2016
y 	Последние две цифры года (с ведущими нулями) 	   16
C 	Первые две цифры года (с ведущими нулями) 	       20
B 	Полное название месяца 	                           ноября
b 	Сокращенное название месяца 	                   ноя
m 	Номер текущего месяца (с ведущими нулями) 	       11
d 	Номер текущего дня месяца (с ведущими нулями) 	   09
e 	Номер текущего дня месяца (без ведущих нулей) 	   9
A 	Полное название текущего дня недели 	           воскресенье
a 	Сокращенное название дня недели 	               Вс
j 	Количество дней с начала года (с ведущими нулями)  318
H 	Формат часа (с ведущими нулями), от 00 до 23 	   01
k 	Формат часа (без ведущих нулей), от 0 до 23 	   1
I 	Формат часа (с ведущими нулями), от 01 до 12 	   01
l 	Формат часа (без ведущих нулей), от 1 до 12 	   1
M 	Минуты (с ведущими нулями) 	                       38
S 	Секунды (с ведущими нулями) 	                   50
L 	Миллисекунды (с ведущими нулями) 	               382
N 	Наносекунды (с ведущими нулями) 	               775000000
p (%Tp) 	Верхний регистр маркера A.M./P.M. 	       AM
p (%tp) 	Нижний регистр маркера A.M./P.M. 	       am
z 	Часовое смещение RFC 822 по GMT 	               +0300
Z 	Часовой пояс 	                                   FET
s 	Секунды, начиная с 1970-01-01 00:00:00 GMT 	       1478991147
Q 	Миллисекунды, начиная с 1970-01-01 00:00:00 GMT    1478991172134
*/
